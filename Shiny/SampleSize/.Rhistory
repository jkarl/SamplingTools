s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,c(l,nSim,pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
sim.tab[1:20,]
sim.tab$indicator <- factor(levels=levels(data$Indicator))
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
sim.tab[1:20,]
summary(sim.tab)
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=8))
names(results.tab)=c("indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("indicator"=as.factor(""),"n"=as.numeric(0),"pwr"=as.numeric(0))
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. Redo the graph in ggplot2 as a lattice by indicator
## 2.
##
row = 1
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,c(l,nSim,pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
results.tab = results.tab[-1,]
sim.tab = sim.tab[-1,]
sim.tab[1:20,]
#plot.frame = data.frame("n"=nRange,"pwr"=plotArr)
g = ggplot(data=sim.tab, aes(x=n,y=pwr))+geom_line(color='blue')
g+facet_wrap(~indicator)
g = ggplot(data=sim.tab, aes(x=n,y=pwr))+geom_line(color=indicator)
g = ggplot(data=sim.tab, aes(x=n,y=pwr,color=indicator))+geom_line()
g
g = ggplot(data=sim.tab, aes(x=n,y=pwr,color=indicator,group=indicator))+geom_line()
g
summary(sim.tab)
summary(iris)
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=8))
names(results.tab)=c("indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("indicator"=as.factor(""),"n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. Redo the graph in ggplot2 as a lattice by indicator
## 2.
##
row = 1
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,c(l,nSim,pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
summary(sim.tab)
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=8))
names(results.tab)=c("indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("indicator"=as.factor(""),"n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. Redo the graph in ggplot2 as a lattice by indicator
## 2.
##
row = 1
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,c(l,as.numeric(nSim),as.numeric(pSim$power)))
#plotArr[nSim-2]=pSim$power
}
}
summary(sim.tab)
sim.tab <- data.frame("indicator"=as.factor(""),"n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
summary(sim.tab)
sim.tab <- rbind(sim.tab,c("v",0,0))
sim.tab <- rbind(sim.tab,c("Bare Soil",0,0))
summary(sim.tab)
sim.tab <- data.frame("indicator"=as.factor(""),"n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
sim.tab <- rbind(sim.tab,data.frame("Bare Soil",0,0))
?rbind
sim.tab <- rbind(sim.tab,data.frame("Bare Soil",0,0),deparse.level=1)
sim.tab <- rbind(sim.tab,data.frame("Bare Soil",0,0),deparse.level=2)
sim.tab <- rbind(sim.tab,data.frame("indicator"="Bare Soil","n"=0,"pwr"=0))
summary(sim.tab)
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=8))
names(results.tab)=c("indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("indicator"=as.factor(""),"n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. Redo the graph in ggplot2 as a lattice by indicator
## 2.
##
row = 1
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,data.frame("indicator"=l,"n"=nSim,"pwr"=pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
sim.tab[1:20,]
summary(sim.tab)
results.tab = results.tab[-1,]
sim.tab = sim.tab[-1,]
#Plot the power curve
#plot.frame = data.frame("n"=nRange,"pwr"=plotArr)
g = ggplot(data=sim.tab, aes(x=n,y=pwr,color=indicator))+geom_line()
g
g+facet_wrap(~indicator)
names(Data)
names(data)
l
levels(data$Site)
strat = "Other"
data.sub <- data[data$Indicator==l AND data$Site==strat,]
?and
data.sub <- data[data$Indicator==l & data$Site==strat,]
data.sub
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=8))
names(results.tab)=c("stratum",indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("stratum"="", "indicator"="","n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. revise to run analysis by stratum (site) and indicator
## 2.
##
row = 1
for (strat in levels(data$Site)) {
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l&data$Site==strat,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(strat,l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,data.frame("stratum"=strat,indicator"=l,"n"=nSim,"pwr"=pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
}
results.tab = results.tab[-1,]
sim.tab = sim.tab[-1,]
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=9))
names(results.tab)=c("stratum",indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("stratum"="", "indicator"="","n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. revise to run analysis by stratum (site) and indicator
## 2.
##
row = 1
for (strat in levels(data$Site)) {
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l&data$Site==strat,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(strat,l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,data.frame("stratum"=strat,indicator"=l,"n"=nSim,"pwr"=pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
}
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=9))
names(results.tab)=c("stratum","indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("stratum"="", "indicator"="","n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. revise to run analysis by stratum (site) and indicator
## 2.
##
row = 1
for (strat in levels(data$Site)) {
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l&data$Site==strat,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(strat,l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,data.frame("stratum"=strat,indicator"=l,"n"=nSim,"pwr"=pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
}
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=9))
names(results.tab)=c("stratum","indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("stratum"="", "indicator"="","n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. revise to run analysis by stratum (site) and indicator
## 2.
##
row = 1
for (strat in levels(data$Site)) {
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l&data$Site==strat,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(strat,l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,data.frame("stratum"=strat,"indicator"=l,"n"=nSim,"pwr"=pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
}
results.tab = results.tab[-1,]
sim.tab = sim.tab[-1,]
results.tab
data.sub
s1 <- var(data.sub$Any.Hit.Avg)
s1
mddPct = 0.25
alpha = 0.05
nRange = seq(3,150)
#plotArr = vector("numeric",length(nRange))
results.tab = data.frame(matrix(nrow=1,ncol=9))
names(results.tab)=c("stratum","indicator","mean","stdev","n.actual","coef.var","actualMDD","power","n.desired.mdd")
sim.tab <- data.frame("stratum"="", "indicator"="","n"=0,"pwr"=0)
sim.tab$indicator <- factor(sim.tab$indicator,levels=levels(data$Indicator))
## 1. revise to run analysis by stratum (site) and indicator
## 2.
##
row = 1
for (strat in levels(data$Site)) {
for (l in levels(data$Indicator)) {
data.sub <- data[data$Indicator==l&data$Site==strat,]
#Calculate power stats
xbar1 <- mean(data.sub$Any.Hit.Avg)
s1 <- var(data.sub$Any.Hit.Avg)
if (xbar1==0 & s1==0) break  ## trap for indicators not measured by stratum
n <- length(data.sub$Any.Hit.Avg)
cv <- xbar1/sqrt(s1)
xbar2 = xbar1 + mddPct*xbar1
sp = sqrt( (n-1)*s1/n  )
d = (xbar1-xbar2)/sp
p = pwr.t.test(n=n,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$power
desired.n = pwr.t.test(power=0.8,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")$n
print(paste(l,p,sep=", "))
#Write results to the table
results.tab = rbind(results.tab,c(strat,l,xbar1,sqrt(s1),n,cv,d,p,desired.n))
# Generate power curve data and write to sim.tab
for (nSim in nRange) {
pSim = pwr.t.test(n=nSim,d=d,sig.level=alpha,type="one.sample",alternative="two.sided")
print(paste(l,nSim,pSim$power,sep=", "))
sim.tab = rbind(sim.tab,data.frame("stratum"=strat,"indicator"=l,"n"=nSim,"pwr"=pSim$power))
#plotArr[nSim-2]=pSim$power
}
}
}
results.tab = results.tab[-1,]
sim.tab = sim.tab[-1,]
results.tab
g = ggplot(data=sim.tab, aes(x=n,y=pwr,color=indicator))+geom_line()
g+facet_wrap(~stratum)
g = ggplot(data=sim.tab, aes(x=n,y=pwr,color=indicator))+geom_line()+geom_vline(data=results.tab,aes(xintercept=as.numeric(n)))
g+facet_wrap(~stratum)
g = ggplot(data=sim.tab, aes(x=n,y=pwr,color=indicator))+geom_line()+geom_vline(data=results.tab,aes(xintercept=as.numeric(n),linetype="dashed"))
g+facet_wrap(~stratum)
shiny::runApp()
?Expr
?expr
test = 'Line'
data$Line
data$test
expr(data$test)
expression(data$test)
paste("data$",test,sep='')
data$paste("data$",test,sep='')
data$eval(paste("data$",test,sep=''))
eval(paste("data$",test,sep='')
)
eval(paste("data$",test,sep=''))
call(paste("data$",test,sep=''))
data[[test]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data.sub
f = 'Any.Hit.Avg'
data.sub[[Any.Hit.Avg]]
data.sub[[,Any.Hit.Avg]]
data.sub[[data.sub$Any.Hit.Avg]]
data.sub[[,data.sub$Any.Hit.Avg]]
data.sub[,data.sub$[[Any.Hit.Avg]]]
data.sub[[data.sub$Any.Hit.Avg]]
data.sub[[f]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
paste(results.tab)
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?xlsx
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggsave
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("png")
shiny::runApp()
?plotPNG
shiny::runApp()
?ggsave
shiny::runApp()
shiny::runApp()
test
d.n = pwr.t.test(power=0.8,d=-1.8375,sig.level=0.05,type="one.sample",alternative="two.sided")
d.n
d.n = pwr.t.test(power=0.8,d=-1.8375,sig.level=0.2,type="one.sample",alternative="two.sided")
d.n
p = pwr.t.test(n=15,d=-1.8375,sig.level=0.05,type='one.sample',alternative='two.sided')
p
p = pwr.t.test(n=15,d=-1.8375,sig.level=0.25,type='one.sample',alternative='two.sided')
p
p = pwr.t.test(n=15,d=-10.8375,sig.level=0.25,type='one.sample',alternative='two.sided')
p
p = pwr.t.test(n=15,d=-0.18375,sig.level=0.25,type='one.sample',alternative='two.sided')
p
d.n = pwr.t.test(power=0.8,d=-0.18375,sig.level=0.2,type="one.sample",alternative="two.sided")
d.n
shiny::runApp()
shiny::runApp()
?runGitHub
runGitHub("SamplingTools", "jkarl", subdir="Shiny/SampleSize")
runGitHub("SamplingTools", "jkarl", subdir="Shiny/SampleSize")
